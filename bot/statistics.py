from asgiref.sync import sync_to_async

import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import numpy as np
import pandas as pd
from pandas import DataFrame as df

from orders.service import *
from products.service import *


TITLE_BY_PARTITION_TYPE = {'D': '–¥–Ω—è–º', 'W-MON': '–Ω–µ–¥–µ–ª—è–º', 'M': '–º–µ—Å—è—Ü–∞–º'}


async def prepare_order_data(user_id, period_start, period_end):
    orders = await get_completed_orders_between(user_id, period_start, period_end)
    values = orders.values('id', 'deadline_time', 'completed_time', 'order_sum', 'num_products')
    orders_df = await sync_to_async(lambda v: df.from_records(v))(values)
    # print(orders_df)
    return orders_df


def get_overall_stats(orders_df):
    total_products = orders_df['num_products'].sum()
    total_revenue = orders_df['order_sum'].sum()
    total_orders = orders_df.shape[0]
    avg_order_sum = total_revenue / total_orders
    return f'üìÑ –ü—Ä–∏–Ω—è—Ç–æ –∑–∞–∫–∞–∑–æ–≤: *{total_orders}*\n' \
           f'üì¶ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: *{total_products}*\n' \
           f'üí∞ –°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: *{total_revenue}* —Ä—É–±.\n' \
           f'üìà –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: *{round(avg_order_sum, 2)}* —Ä—É–±.'


def plot_revenue_trend(filepath, orders_df, partition_type):
    orders_df = orders_df.loc[:, ['deadline_time', 'order_sum']]
    grouped_orders = orders_df.groupby(pd.Grouper(key='deadline_time', freq=partition_type)).sum()

    plt.ioff()
    plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ ' + TITLE_BY_PARTITION_TYPE[partition_type])
    plt.ylabel('–≤—ã—Ä—É—á–∫–∞, —Ä—É–±.', fontsize=12)
    plt.xticks(rotation=30, ha="right")

    x = grouped_orders.index
    y = grouped_orders[:]

    plt.grid()
    plt.plot(x, y)
    plt.savefig(filepath)
    plt.clf()


def plot_num_orders_trend(filepath, orders_df, partition_type):
    orders_df = orders_df.loc[:, ['deadline_time']]
    orders_df['num_orders'] = np.ones(orders_df.shape[0], dtype=int)
    grouped_orders = orders_df.groupby(pd.Grouper(key='deadline_time', freq=partition_type)).sum()

    plt.ioff()
    ax = plt.figure().gca()
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))

    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ ' + TITLE_BY_PARTITION_TYPE[partition_type])
    plt.ylabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, —à—Ç.', fontsize=12)
    plt.xticks(rotation=30, ha="right")

    x = grouped_orders.index
    y = grouped_orders[:]

    plt.grid()
    plt.plot(x, y)
    plt.savefig(filepath)
    plt.clf()


def plot_avg_order_sum_trend(filepath, orders_df, partition_type):
    orders_df = orders_df.loc[:, ['deadline_time', 'order_sum']]
    orders_df['num_orders'] = np.ones(orders_df.shape[0])
    grouped_orders = orders_df.groupby(pd.Grouper(key='deadline_time', freq=partition_type)).sum()

    plt.ioff()
    plt.title('–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –ø–æ ' + TITLE_BY_PARTITION_TYPE[partition_type])
    plt.ylabel('—Å—É–º–º–∞, —Ä—É–±.', fontsize=12)
    plt.xticks(rotation=30, ha="right")

    x = grouped_orders.index
    y = [0] * grouped_orders.shape[0]
    for i in range(len(y)):
        if grouped_orders['num_orders'][i] != 0:
            y[i] = grouped_orders['order_sum'][i] / grouped_orders['num_orders'][i]
        else:
            y[i] = 0

    plt.grid()
    plt.plot(x, y)
    plt.savefig(filepath)
    plt.clf()


def plot_product_popularity_trend(filepath, products, order_products):
    count_by_products = {product[0]: 0 for product in products}

    for entry in order_products:
        count_by_products[entry['product']] += entry['amount']

    plt.ioff()
    plt.grid(axis='y')
    plt.ylabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, —à—Ç.', fontsize=12)
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é')

    product_names = [entry[1] for entry in products]
    plt.bar(product_names, count_by_products.values(), color=plt.get_cmap('tab20c').colors)
    plt.savefig(filepath)
    plt.clf()
